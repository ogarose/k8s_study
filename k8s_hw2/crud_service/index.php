<?php
// GENERATED BY OPENAI

// MySQL database configuration
$host = $_ENV['DB_HOST'] ?? '127.0.0.1';
$port = $_ENV['DB_PORT'] ?? '3306';
$dbName = $_ENV['DB_NAME'] ??  'hw_db';
$username = $_ENV['DB_USERNAME'] ?? 'root';
$password = $_ENV['DB_PASSWORD'] ?? 'my-secret-pw';

try {
    // Create a PDO connection to the MySQL database
    $pdo = new PDO("mysql:host=$host;port=$port;dbname=$dbName", $username, $password);
} catch (PDOException $e) {
    // Handle connection error
    die("Connection failed: " . $e->getMessage());
}

// Extract the HTTP method and path
$method = $_SERVER['REQUEST_METHOD'];
$path = $_SERVER['REQUEST_URI'] ?? '/';

// Handle create user request
if ($method === 'POST' && $path === '/user') {
    $requestBody = json_decode(file_get_contents('php://input'), true);
    $username = $requestBody['username'];
    $firstName = $requestBody['firstName'];
    $lastName = $requestBody['lastName'];
    $email = $requestBody['email'];
    $phone = $requestBody['phone'];

    // Prepare the SQL statement
    $stmt = $pdo->prepare("INSERT INTO users (username, first_name, last_name, email, phone)
                           VALUES (?, ?, ?, ?, ?)");

    // Bind the parameter values
    $stmt->bindParam(1, $username);
    $stmt->bindParam(2, $firstName);
    $stmt->bindParam(3, $lastName);
    $stmt->bindParam(4, $email);
    $stmt->bindParam(5, $phone);
    $stmt->execute();

    // Prepare the SQL statement
    $stmt = $pdo->prepare("SELECT * FROM users WHERE username = ? limit 1");

    // Bind the parameter value
    $stmt->bindParam(1, $username);

    // Execute the SQL statement
    $stmt->execute();

    // Fetch the user data
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    // Execute the SQL statement
    if ($stmt->execute()) {
        http_response_code(201);
        echo json_encode($user);
    } else {
        http_response_code(500);
        echo json_encode(['error' => 'Failed to create user']);
    }
}

// Handle get user request
if ($method === 'GET' && preg_match('/^\/user\/(\d+)$/', $path, $matches)) {
    $userId = $matches[1];

    // Prepare the SQL statement
    $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");

    // Bind the parameter value
    $stmt->bindParam(1, $userId);

    // Execute the SQL statement
    $stmt->execute();

    // Fetch the user data
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user) {
        echo json_encode($user);
    } else {
        http_response_code(404);
        echo json_encode(['error' => 'User not found']);
    }
}

// Handle delete user request
if ($method === 'DELETE' && preg_match('/^\/user\/(\d+)$/', $path, $matches)) {
    $userId = $matches[1];

    // Prepare the SQL statement
    $stmt = $pdo->prepare("DELETE FROM users WHERE id = ?");

    // Bind the parameter value
    $stmt->bindParam(1, $userId);

    // Execute the SQL statement
    if ($stmt->execute()) {
        http_response_code(204);
    } else {
        http_response_code(500);
        echo json_encode(['error' => 'Failed to delete user']);
    }
}

// Handle update user request
if ($method === 'PUT' && preg_match('/^\/user\/(\d+)$/', $path, $matches)) {
    $userId = $matches[1];
    $requestBody = json_decode(file_get_contents('php://input'), true);
    $firstName = $requestBody['firstName'];
    $lastName = $requestBody['lastName'];
    $email = $requestBody['email'];
    $phone = $requestBody['phone'];

    // Prepare the SQL statement
    $stmt = $pdo->prepare("UPDATE users SET first_name = ?, last_name = ?, email = ?, phone = ?
                           WHERE id = ?");

    // Bind the parameter values
    $stmt->bindParam(1, $firstName);
    $stmt->bindParam(2, $lastName);
    $stmt->bindParam(3, $email);
    $stmt->bindParam(4, $phone);
    $stmt->bindParam(5, $userId);

    // Execute the SQL statement
    if ($stmt->execute()) {
        http_response_code(200);
        echo json_encode(['message' => 'User updated successfully']);
    } else {
        http_response_code(500);
        echo json_encode(['error' => 'Failed to update user']);
    }
}
